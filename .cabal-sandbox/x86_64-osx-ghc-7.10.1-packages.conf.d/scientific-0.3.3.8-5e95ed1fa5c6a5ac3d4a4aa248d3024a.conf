name: scientific
version: 0.3.3.8
id: scientific-0.3.3.8-5e95ed1fa5c6a5ac3d4a4aa248d3024a
key: scien_Gci0FThF8gLD126aiJRa6U
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides a space efficient and arbitrary precision
    scientific number type.
    .
    'Scientific' numbers are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It
    uses a coefficient @c :: 'Integer'@ and a base-10 exponent @e :: 'Int'@ (do
    note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision). A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.Scientific Data.Text.Lazy.Builder.Scientific
    Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
trusted: False
import-dirs: /Users/gpeterson/code/haskell/scotty-first/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.1/scien_Gci0FThF8gLD126aiJRa6U
library-dirs: /Users/gpeterson/code/haskell/scotty-first/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.1/scien_Gci0FThF8gLD126aiJRa6U
data-dir: /Users/gpeterson/code/haskell/scotty-first/.cabal-sandbox/share/x86_64-osx-ghc-7.10.1/scientific-0.3.3.8
hs-libraries: HSscientific-0.3.3.8-Gci0FThF8gLD126aiJRa6U
depends:
    array-0.5.1.0-e29cdbe82692341ebb7ce6e2798294f9
    base-4.8.0.0-9015e10d2b2b0f71f570c3f2bbe09c8a
    bytestring-0.10.6.0-3ca2b1049f8b29ce68d75c9a9933b807
    deepseq-1.4.1.1-936d71d0dde291c29ce67bcf563f5865
    ghc-prim-0.4.0.0-7c945cc0c41d3b7b70f3edd125671166
    hashable-1.2.3.3-50d705a88a362cbc6e091b62e64acf0d
    integer-gmp-1.0.0.0-3c947e5fb6dca14804d9b2793c521b67
    text-1.2.1.1-1f867ee4ab49d53bce66a7f07ceb511e
haddock-interfaces: /Users/gpeterson/code/haskell/scotty-first/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.10.1/scientific-0.3.3.8/html/scientific.haddock
haddock-html: /Users/gpeterson/code/haskell/scotty-first/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.10.1/scientific-0.3.3.8/html
